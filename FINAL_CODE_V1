#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Wi-Fi Credentials
const char* ssid = "Home";
const char* password = "12345678";
const char* dummyAPI = "https://jsonplaceholder.typicode.com/posts";

// Pins
#define SENSOR_PIN       35
#define FORMAT_BTN       33
#define SD_STATUS_BTN    13
#define WIFI_STATUS_BTN  14
#define SD_CS             5
#define I2C_SDA          21
#define I2C_SCL          22

// LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Variables
unsigned long lastMillis = 0;
const unsigned int interval = 500;
unsigned long totalCount = 0;
unsigned long intervalCount = 0;
unsigned int rpm = 0;
bool previousState = HIGH;
bool wasWiFiConnected = false;

enum DisplayState { NORMAL, SHOW_SD_INFO, SHOW_WIFI_INFO };
DisplayState displayState = NORMAL;
unsigned long infoDisplayStart = 0;

void setup() {
  Serial.begin(115200);
  pinMode(SENSOR_PIN, INPUT);
  pinMode(FORMAT_BTN, INPUT_PULLUP);
  pinMode(SD_STATUS_BTN, INPUT_PULLUP);
  pinMode(WIFI_STATUS_BTN, INPUT_PULLUP);

  Wire.begin(I2C_SDA, I2C_SCL);
  lcd.init(); lcd.backlight();
  lcd.setCursor(0, 0); lcd.print("Initializing...");

  if (!SD.begin(SD_CS)) {
    lcd.setCursor(0, 1); lcd.print("SD Failed!");
    while (true);
  }

  lcd.setCursor(0, 1); lcd.print("WiFi Connecting...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
  }

  lcd.clear(); lcd.setCursor(0, 0); lcd.print("System Ready!");
  writeHeader();
  delay(1500); lcd.clear();
}

void loop() {
  checkButtons();
  handleWiFiReconnect();

  bool currentState = digitalRead(SENSOR_PIN);
  if (currentState == HIGH && previousState == LOW) {
    totalCount++;
    intervalCount++;
  }
  previousState = currentState;

  if (millis() - lastMillis >= interval) {
    lastMillis = millis();
    rpm = (intervalCount * 60 * 1000UL) / interval;

    if (intervalCount > 0) {
      if (WiFi.status() == WL_CONNECTED) {
        sendToAPI(totalCount, rpm);
      } else {
        logToSD(totalCount, rpm);
      }
    }

    if (displayState == NORMAL) {
      displayDefault(totalCount, rpm);
    }

    intervalCount = 0;
  }

  if (displayState != NORMAL && millis() - infoDisplayStart > 5000) {
    displayState = NORMAL;
    lcd.clear();
  }
}

void writeHeader() {
  File logFile = SD.open("/dolphin_log.csv", FILE_WRITE);
  if (logFile) {
    logFile.println("Timestamp(ms),Count,RPM");
    logFile.close();
  }
}

void logToSD(unsigned long count, unsigned int rpmVal) {
  File logFile = SD.open("/dolphin_log.csv", FILE_APPEND);
  if (logFile) {
    logFile.print(millis()); logFile.print(",");
    logFile.print(count); logFile.print(",");
    logFile.println(rpmVal);
    logFile.close();
  }
}

void sendToAPI(unsigned long count, unsigned int rpmVal) {
  HTTPClient http;
  http.begin(dummyAPI);
  http.addHeader("Content-Type", "application/json");
  String payload = "{\"count\":" + String(count) + ",\"rpm\":" + String(rpmVal) + "}";
  http.POST(payload);
  http.end();
}

void uploadStoredData() {
  File logFile = SD.open("/dolphin_log.csv");
  if (logFile) {
    logFile.readStringUntil('\n'); // skip header
    while (logFile.available()) {
      String line = logFile.readStringUntil('\n');
      if (line.length() > 5) {
        int idx1 = line.indexOf(',');
        int idx2 = line.indexOf(',', idx1 + 1);
        String countStr = line.substring(idx1 + 1, idx2);
        String rpmStr = line.substring(idx2 + 1);
        sendToAPI(countStr.toInt(), rpmStr.toInt());
        delay(200);
      }
    }
    logFile.close();
    SD.remove("/dolphin_log.csv");
    writeHeader();
  }
}

void handleWiFiReconnect() {
  bool isConnected = WiFi.status() == WL_CONNECTED;
  if (isConnected && !wasWiFiConnected) {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("WiFi Reconnected");
    lcd.setCursor(0, 1); lcd.print("Uploading Data...");
    uploadStoredData();
    delay(2000); lcd.clear();
  }
  wasWiFiConnected = isConnected;
}

void displayDefault(unsigned long count, unsigned int rpmVal) {
  lcd.setCursor(0, 0); lcd.print("Count: "); lcd.print(count);
  lcd.setCursor(0, 1); lcd.print("RPM: "); lcd.print(rpmVal);
}

void checkButtons() {
  if (digitalRead(FORMAT_BTN) == LOW) {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("Formatting...");
    if (SD.remove("/dolphin_log.csv")) {
      lcd.setCursor(0, 1); lcd.print("Log Erased!");
      SD.end(); delay(300);
      SD.begin(SD_CS);
      writeHeader();
    }
    delay(1000); lcd.clear();
  }

  if (digitalRead(SD_STATUS_BTN) == LOW) {
    displayState = SHOW_SD_INFO;
    infoDisplayStart = millis();
    lcd.clear();
    uint64_t totalKB = SD.cardSize() / 1024;
    File f = SD.open("/dolphin_log.csv");
    uint64_t usedKB = f ? f.size() / 1024 : 0;
    if (f) f.close();
    lcd.setCursor(0, 0); lcd.print("SD: OK");
    lcd.setCursor(0, 1); lcd.print(usedKB); lcd.print("/"); lcd.print(totalKB); lcd.print(" KB");
    delay(300);
  }

  if (digitalRead(WIFI_STATUS_BTN) == LOW) {
    displayState = SHOW_WIFI_INFO;
    infoDisplayStart = millis();
    lcd.clear();
    if (WiFi.status() == WL_CONNECTED) {
      lcd.setCursor(0, 0); lcd.print("WiFi: CONNECTED");
      lcd.setCursor(0, 1); lcd.print(WiFi.localIP());
    } else {
      lcd.setCursor(0, 0); lcd.print("WiFi: NOT CONN");
    }
    delay(300);
  }
}
